import { NextRequest, NextResponse } from "next/server";
import { createClient } from "../../../../supabase/server";

export async function POST(request: NextRequest) {
  try {
    const supabase = await createClient();

    // Get user to verify authorization
    const {
      data: { user },
    } = await supabase.auth.getUser();
    if (!user) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }

    let body;
    try {
      body = await request.json();
    } catch (error) {
      return NextResponse.json(
        { error: "Invalid JSON in request body" },
        { status: 400 },
      );
    }

    const { message } = body;

    if (!message) {
      return NextResponse.json(
        { error: "Missing required field: message" },
        { status: 400 },
      );
    }

    // This is where you would integrate with OpenAI
    // For now, we'll return a mock response

    // Example OpenAI integration (commented out):
    /*
    const openai = new OpenAI({
      apiKey: process.env.OPENAI_API_KEY,
    });

    const completion = await openai.chat.completions.create({
      model: "gpt-4o",
      messages: [
        { role: "system", content: "You are a helpful assistant." },
        { role: "user", content: message }
      ],
    });

    const aiResponse = completion.choices[0].message.content;
    */

    // Mock response
    const aiResponse = `This is a simulated response to: "${message}". In a real implementation, this would be generated by OpenAI's API.`;

    // Store the conversation in the database
    const { error } = await supabase.from("messages").insert([
      {
        chat_id: "ai-chat",
        from_number: user.id,
        body: message,
        timestamp: new Date().toISOString(),
        is_from_me: true,
        chat_name: "AI Chat",
      },
      {
        chat_id: "ai-chat",
        from_number: "ai-assistant",
        body: aiResponse,
        timestamp: new Date().toISOString(),
        is_from_me: false,
        chat_name: "AI Chat",
      },
    ]);

    if (error) {
      console.error("Error storing messages:", error);
    }

    return NextResponse.json({
      response: aiResponse,
    });
  } catch (error) {
    console.error("Error in chat API:", error);
    return NextResponse.json(
      { error: "An unexpected error occurred" },
      { status: 500 },
    );
  }
}
